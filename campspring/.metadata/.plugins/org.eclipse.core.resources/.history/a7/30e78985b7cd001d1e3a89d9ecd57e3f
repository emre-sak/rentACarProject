package kodlama.io.rentACar.business.concretes;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import kodlama.io.rentACar.business.abstracts.CarService;
import kodlama.io.rentACar.business.abstracts.ModelService;
import kodlama.io.rentACar.business.requests.CreateCarRequest;
import kodlama.io.rentACar.business.requests.UpdateCarRequest;
import kodlama.io.rentACar.business.responses.GetAllCarsResponse;
import kodlama.io.rentACar.business.responses.GetByIdCarResponse;
import kodlama.io.rentACar.business.rules.CarBusinessRules;
import kodlama.io.rentACar.business.rules.ModelBusinessRules;
import kodlama.io.rentACar.core.utilities.mappers.ModelMapperService;
import kodlama.io.rentACar.dataAccess.abstracts.CarRepository;
import kodlama.io.rentACar.dataAccess.abstracts.ModelRepository;
import kodlama.io.rentACar.entities.concretes.Car;
import kodlama.io.rentACar.entities.concretes.Model;
import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class CarManager implements CarService {

	private CarRepository carRepository;
	private ModelService modelService;
	private ModelMapperService modelMapperService;
	private CarBusinessRules carBusinessRules;
	private ModelBusinessRules modelBusinessRules;

	@Override
	public List<GetAllCarsResponse> getAll() {

		List<Car> cars = this.carRepository.findAll();

		List<GetAllCarsResponse> carsResponse = cars.stream()
				.map(car -> this.modelMapperService.forResponse().map(car, GetAllCarsResponse.class))
				.collect(Collectors.toList());

		return carsResponse;
	}

	@Override
	public GetByIdCarResponse getById(int id) {

		this.carBusinessRules.checkIfCarIdExists(id);

		Car car = this.carRepository.findById(id).orElseThrow();

		GetByIdCarResponse getByIdCarResponse = this.modelMapperService.forResponse().map(car,
				GetByIdCarResponse.class);

		return getByIdCarResponse;
	}

	@Override
	public void add(CreateCarRequest createCarRequest) {

		this.modelBusinessRules.checkIfModelIdExists(createCarRequest.getModelId());

		Car car = this.modelMapperService.forRequest().map(createCarRequest, Car.class);

		this.carRepository.save(car);

	}

	@Override
	public void update(UpdateCarRequest updateCarRequest) {

		this.carBusinessRules.checkIfCarIdExists(updateCarRequest.getId());
		this.modelBusinessRules.checkIfModelIdExists(updateCarRequest.getModelId());

		Model model = this.modelMapperService.forResponse().map(modelService.getById(updateCarRequest.getModelId()), Model.class);

		Car car = this.modelMapperService.forRequest().map(updateCarRequest, Car.class);
		car.setModel(model);
		this.carRepository.save(car);

	}

	@Override
	public void delete(int id) {

		this.carBusinessRules.checkIfCarIdExists(id);

		this.carRepository.deleteById(id);

	}

}
