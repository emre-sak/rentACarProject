package kodlama.io.rentACar.webApi.controllers;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;
import kodlama.io.rentACar.business.abstracts.BrandService;
import kodlama.io.rentACar.business.requests.CreateBrandRequest;
import kodlama.io.rentACar.business.requests.UpdateBrandRequest;
import kodlama.io.rentACar.business.responses.GetAllBrandsResponse;
import kodlama.io.rentACar.business.responses.GetByIdBrandResponse;
import lombok.AllArgsConstructor;

/*
 * RestFull yapılar için controller olduğunu belirtmek için @RestController anatasyonunu kullandık. Uygulamamız ça
 * lıştığı esnada kimde @RestController var diye arıyor hangi classta varsa erişim noktası oluyor. Buna ulaşmak için
 * @RequestMapping anatasyonunu kullandık. Adresimizin sonuna api/brands dersek bu controller'ı kastettiğimiz anlamı
 * na gelir. Controller BrandService'yi kullanır. Bu durumda istek controller'a yapılıyor, controller isteği uygun
 * bulursa business'a gidiyor ve iş geliştirme biriminin bize söylediği iş kurallarından geçiyorsa business data 
 * access'e gidip veriyi getiriyor. getAll'a erişmek için @GetMapping anatasyonunu kullandık.
 * @Autowired, git parametrelerine bak ve ugyulamayı tara kim bu BrandService'yi implement ediyorsa onun newlenmiş
 * halini bana ver. Spring'in yeni versiyonlarında yazmasakta otomatik ekliyor. Buna IoC container denir.
 * 
 * application.properties'ten veritabanı bağlantısı yaptık.
 * 
 * ModelMapper IoC'ye eklenmediği için RentACarApplication'da biz newledik. Bunun için @Bean anatasyonunu ekledik.
 * Bean IoC container'a ekleme yapar.
 * 
 * @RequestBody, RequestBody'den okuyacağım anlamına gelir.
 * 
 * @Valid, validationların devreye girebilmesi için kullanmamız gerekiyor.
 * 
 * @ResponseStatus(code=HttpStatus.CREATED) HTTP statülerinden 201 nesne oluşturulduğunu anlatır.
 * 
 * @GetMapping("/{id}") id'i isteği yaptığı noktada bir değer vererek. Süslü parantez içinde yazmamız veriable
 * demek ve git onu path'den al demek yani @RequestMapping("/api/brands/{id}") gibi. id'e kaç yazarsak onu verecek.
 * 
 */

@RestController
@RequestMapping("/api/brands")
@AllArgsConstructor
public class BrandsController {
	
	private BrandService brandService;
	
	@GetMapping()
	public List<GetAllBrandsResponse> getAll() {
		return this.brandService.getAll();
	}
	
	@GetMapping("/{id}")
	public GetByIdBrandResponse getById(@PathVariable int id) {
		return this.brandService.getById(id);
	}
	
	@PostMapping()
	@ResponseStatus(code=HttpStatus.CREATED) 
	public void add(@RequestBody @Valid CreateBrandRequest createBrandRequest) {
		this.brandService.add(createBrandRequest);
	}
	
	@PutMapping()
	public void update(@RequestBody @Valid UpdateBrandRequest updateBrandRequest) {
		this.brandService.update(updateBrandRequest);
	}
	
	@DeleteMapping("/{id}")
	public void delete(@PathVariable int id) {
		this.brandService.delete(id);
	}

}
